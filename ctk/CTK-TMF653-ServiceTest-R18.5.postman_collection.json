{
	"info": {
		"_postman_id": "cf764547-384d-4077-b754-f800d74f9d1f",
		"name": "CTK-TMF653-ServiceTest-R18.5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ServiceTestSpecification",
			"item": [
				{
					"name": "N1",
					"item": [
						{
							"name": "/serviceTestSpecification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData)) {",
											"",
											"    pm.test('Array not expected as response', function () {",
											"        pm.expect.fail()",
											"    });",
											"",
											"",
											"}",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var instance = pm.response.json();",
											"var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"",
											"pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"});",
											"",
											"",
											"",
											"pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"});",
											"pm.test('Response href attribute is of type string', function () {",
											"    pm.expect(instance.href).to.be.a('string');",
											"});",
											"pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"});",
											"pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"    pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"});",
											"pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"});",
											"pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test('id is set', function () {",
											"    pm.globals.set('IDTS01', instance.id);",
											"    pm.expect(instance.id) == pm.globals.get(\"IDTS01\");",
											"});",
											"pm.test('href is set', function () {",
											"    pm.globals.set('HREFTS01', instance.href);",
											"    pm.expect(instance.href) == pm.globals.get(\"HREFTS01\");",
											"});",
											"pm.test('name is set', function () {",
											"    pm.globals.set('NAMETS01', instance.name);",
											"    pm.expect(instance.name) == pm.globals.get(\"NAMETS01\");",
											"});",
											"pm.test('relatedServiceSpecification is set', function () {",
											"    pm.globals.set('RELATEDSERVICESPECIFICATIONTS01', instance.relatedServiceSpecification);",
											"    pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\");",
											"});",
											"pm.test('relatedServiceSpecification_id is set', function () {",
											"    pm.globals.set('RELATEDSERVICESPECIFICATION_IDTS01', instance.relatedServiceSpecification.id);",
											"    pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\");",
											"});",
											"pm.test('relatedServiceSpecification_href is set', function () {",
											"    pm.globals.set('RELATEDSERVICESPECIFICATION_HREFTS01', instance.relatedServiceSpecification.href);",
											"    pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\");",
											"});",
											"",
											"",
											"pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"});",
											"pm.test(\"Body includes value held on href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.href);",
											"});",
											"pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"});",
											"pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"});",
											"pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"tspec1\",\n    \"relatedServiceSpecification\":{\n        \"id\":\"rs1\",\n        \"href\":\"/rs1\"\n    }\n}"
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTestSpecification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"  });",
											"  ",
											"  ",
											"  ",
											"  var jsonData = pm.response.json();",
											"  ",
											"  if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"    jsonData.forEach(function (instance, index) {",
											"      ",
											"      var requiredAttributes = [ 'id', 'href', 'name', 'relatedServiceSpecification',  ];",
											"      ",
											"      pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
											"      ",
											"      ",
											"      ",
											"      pm.test('Response id attribute is of type string', function() { pm.expect(instance.id).to.be.a('string'); });",
											"pm.test('Response href attribute is of type string', function() { pm.expect(instance.href).to.be.a('string'); });",
											"pm.test('Response name attribute is of type string', function() { pm.expect(instance.name).to.be.a('string'); });",
											"pm.test('Response relatedServiceSpecification attribute is of type object', function() { pm.expect(instance.relatedServiceSpecification).to.be.a('object'); });",
											"pm.test('Response relatedServiceSpecification.id attribute is of type string', function() { pm.expect(instance.relatedServiceSpecification.id).to.be.a('string'); });",
											"pm.test('Response relatedServiceSpecification.href attribute is of type string', function() { pm.expect(instance.relatedServiceSpecification.href).to.be.a('string'); });",
											"",
											"      ",
											"      pm.test(\"Body includes value held on id\", function () {",
											"          pm.expect(pm.response.text()).to.include(instance.id);",
											"      });",
											"pm.test(\"Body includes value held on href\", function () {",
											"          pm.expect(pm.response.text()).to.include(instance.href);",
											"      });",
											"pm.test(\"Body includes value held on name\", function () {",
											"          pm.expect(pm.response.text()).to.include(instance.name);",
											"      });",
											"pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"            pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"        });",
											"pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"            pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"        });",
											"",
											"      ",
											"      ",
											"  ",
											"      // Individualized tests",
											"      if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"  ",
											"        pm.test('id is ' + pm.globals.get(\"IDTS01\"), function() {pm.expect(instance.id) == pm.globals.get(\"IDTS01\");});",
											"pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function() {pm.expect(instance.href) == pm.globals.get(\"HREFTS01\");});",
											"pm.test('name is ' + pm.globals.get(\"NAMETS01\"), function() {pm.expect(instance.name) == pm.globals.get(\"NAMETS01\");});",
											"pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\"), function() {pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\");});",
											"pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\"), function() {pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\");});",
											"pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\"), function() {pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\");});",
											"",
											"      }",
											"",
											"  ",
											"    });",
											"  }",
											"  else {",
											"    var instance = pm.response.json();",
											"    var requiredAttributes = [ 'id', 'href', 'name', 'relatedServiceSpecification',  ];",
											"      ",
											"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
											"    ",
											"    ",
											"    ",
											"    pm.test('Response id attribute is of type string', function() { pm.expect(instance.id).to.be.a('string'); });",
											"pm.test('Response href attribute is of type string', function() { pm.expect(instance.href).to.be.a('string'); });",
											"pm.test('Response name attribute is of type string', function() { pm.expect(instance.name).to.be.a('string'); });",
											"pm.test('Response relatedServiceSpecification attribute is of type object', function() { pm.expect(instance.relatedServiceSpecification).to.be.a('object'); });",
											"pm.test('Response relatedServiceSpecification.id attribute is of type string', function() { pm.expect(instance.relatedServiceSpecification.id).to.be.a('string'); });",
											"pm.test('Response relatedServiceSpecification.href attribute is of type string', function() { pm.expect(instance.relatedServiceSpecification.href).to.be.a('string'); });",
											"",
											"    ",
											"    pm.test(\"Body includes value held on id\", function () {",
											"          pm.expect(pm.response.text()).to.include(instance.id);",
											"      });",
											"pm.test(\"Body includes value held on href\", function () {",
											"          pm.expect(pm.response.text()).to.include(instance.href);",
											"      });",
											"pm.test(\"Body includes value held on name\", function () {",
											"          pm.expect(pm.response.text()).to.include(instance.name);",
											"      });",
											"pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"            pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"        });",
											"pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"            pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"        });",
											"",
											"    ",
											"    ",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTS01\"), function() {pm.expect(instance.id) == pm.globals.get(\"IDTS01\");});",
											"pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function() {pm.expect(instance.href) == pm.globals.get(\"HREFTS01\");});",
											"pm.test('name is ' + pm.globals.get(\"NAMETS01\"), function() {pm.expect(instance.name) == pm.globals.get(\"NAMETS01\");});",
											"pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\"), function() {pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\");});",
											"pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\"), function() {pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\");});",
											"pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\"), function() {pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\");});",
											"",
											"    }",
											"   ",
											"  }",
											"  ",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTestSpecification/{{IDTS01}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response href attribute is of type string', function () {",
											"      pm.expect(instance.href).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"      pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.href);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDSQ01\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTS01\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTS01\");",
											"      });",
											"      pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function () {",
											"        pm.expect(instance.href) == pm.globals.get(\"HREFTS01\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETS01\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETS01\");",
											"      });",
											"      pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDSQ02\")) {",
											"",
											"      pm.test('IDSQ02 not expected on this test', function () {",
											"        pm.expect.fail()",
											"      });",
											"    }",
											"",
											"  });",
											"} else {",
											"  var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"  var instance = pm.response.json();",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response href attribute is of type string', function () {",
											"    pm.expect(instance.href).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"    pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.href);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDSQ01\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTS01\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTS01\");",
											"    });",
											"    pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function () {",
											"      pm.expect(instance.href) == pm.globals.get(\"HREFTS01\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETS01\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETS01\");",
											"    });",
											"    pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDSQ02\")) {",
											"",
											"    pm.test('IDSQ02 not expected on this test', function () {",
											"      pm.expect.fail()",
											"    });",
											"  }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification/{{IDTS01}}",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification",
										"{{IDTS01}}"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "N2",
					"item": [
						{
							"name": "/serviceTestSpecification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData)) {",
											"",
											"    pm.test('Array not expected as response', function () {",
											"        pm.expect.fail()",
											"    });",
											"",
											"",
											"}",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var instance = pm.response.json();",
											"var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"",
											"pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"});",
											"",
											"",
											"",
											"pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"});",
											"pm.test('Response href attribute is of type string', function () {",
											"    pm.expect(instance.href).to.be.a('string');",
											"});",
											"pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"});",
											"pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"    pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"});",
											"pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"});",
											"pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test('id is set', function () {",
											"    pm.globals.set('IDTS02', instance.id);",
											"    pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"});",
											"pm.test('href is set', function () {",
											"    pm.globals.set('HREFTS02', instance.href);",
											"    pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"});",
											"pm.test('name is set', function () {",
											"    pm.globals.set('NAMETS02', instance.name);",
											"    pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"});",
											"pm.test('relatedServiceSpecification is set', function () {",
											"    pm.globals.set('RELATEDSERVICESPECIFICATIONTS02', instance.relatedServiceSpecification);",
											"    pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"});",
											"pm.test('relatedServiceSpecification_id is set', function () {",
											"    pm.globals.set('RELATEDSERVICESPECIFICATION_IDTS02', instance.relatedServiceSpecification.id);",
											"    pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"});",
											"pm.test('relatedServiceSpecification_href is set', function () {",
											"    pm.globals.set('RELATEDSERVICESPECIFICATION_HREFTS02', instance.relatedServiceSpecification.href);",
											"    pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"});",
											"",
											"",
											"pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"});",
											"pm.test(\"Body includes value held on href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.href);",
											"});",
											"pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"});",
											"pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"});",
											"pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"tspec2\",\n    \"relatedServiceSpecification\":{\n        \"id\":\"rs2\",\n        \"href\":\"/rs2\"\n    }\n}"
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTestSpecification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response href attribute is of type string', function () {",
											"      pm.expect(instance.href).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"      pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.href);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTS01\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTS01\");",
											"      });",
											"      pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function () {",
											"        pm.expect(instance.href) == pm.globals.get(\"HREFTS01\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETS01\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETS01\");",
											"      });",
											"      pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTS02\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"      });",
											"      pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function () {",
											"        pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETS02\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"      });",
											"      pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"      });",
											"",
											"    }",
											"",
											"",
											"  });",
											"} else {",
											"  var instance = pm.response.json();",
											"  var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response href attribute is of type string', function () {",
											"    pm.expect(instance.href).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"    pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.href);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTS01\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTS01\");",
											"    });",
											"    pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function () {",
											"      pm.expect(instance.href) == pm.globals.get(\"HREFTS01\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETS01\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETS01\");",
											"    });",
											"    pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTS02\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"    });",
											"    pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function () {",
											"      pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETS02\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"    });",
											"    pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"    });",
											"",
											"  }",
											"",
											"}",
											"",
											"pm.test(\"Body has IDTS01\", function () {",
											"  pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDTS01\"));",
											"});",
											"",
											"pm.test(\"Body has IDTS02\", function () {",
											"  pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDTS02\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTestSpecification/{{IDTS02}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response href attribute is of type string', function () {",
											"      pm.expect(instance.href).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"      pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.href);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTS02\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"      });",
											"      pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function () {",
											"        pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETS02\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"      });",
											"      pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"      pm.test('pm.globals.get(IDTS01) not expected on this test', function () {",
											"        pm.expect.fail()",
											"      });",
											"    }",
											"",
											"  });",
											"} else {",
											"  var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"  var instance = pm.response.json();",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response href attribute is of type string', function () {",
											"    pm.expect(instance.href).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"    pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.href);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTS02\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"    });",
											"    pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function () {",
											"      pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETS02\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"    });",
											"    pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"    pm.test('pm.globals.get(IDTS01) not expected on this test', function () {",
											"      pm.expect.fail()",
											"    });",
											"  }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification/{{IDTS02}}",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification",
										"{{IDTS02}}"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "N3",
					"item": [
						{
							"name": "/serviceTestSpecification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response href attribute is of type string', function () {",
											"      pm.expect(instance.href).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"      pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.href);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTS01\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTS01\");",
											"      });",
											"      pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function () {",
											"        pm.expect(instance.href) == pm.globals.get(\"HREFTS01\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETS01\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETS01\");",
											"      });",
											"      pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTS02\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"      });",
											"      pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function () {",
											"        pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETS02\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"      });",
											"      pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"      });",
											"",
											"    }",
											"",
											"",
											"  });",
											"} else {",
											"  var instance = pm.response.json();",
											"  var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response href attribute is of type string', function () {",
											"    pm.expect(instance.href).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"    pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.href);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTS01\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTS01\");",
											"    });",
											"    pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function () {",
											"      pm.expect(instance.href) == pm.globals.get(\"HREFTS01\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETS01\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETS01\");",
											"    });",
											"    pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS01\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS01\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS01\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTS02\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"    });",
											"    pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function () {",
											"      pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETS02\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"    });",
											"    pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"    });",
											"",
											"  }",
											"",
											"}",
											"",
											"pm.test(\"Body has IDTS01\", function () {",
											"  pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDTS01\"));",
											"});",
											"",
											"pm.test(\"Body has IDTS02\", function () {",
											"  pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDTS02\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTestSpecification?name=tspec2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response href attribute is of type string', function () {",
											"      pm.expect(instance.href).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"      pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.href);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTS02\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"      });",
											"      pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function () {",
											"        pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETS02\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"      });",
											"      pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"      pm.test('pm.globals.get(IDTS01) not expected on this test', function () {",
											"        pm.expect.fail()",
											"      });",
											"    }",
											"",
											"  });",
											"} else {",
											"  var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"  var instance = pm.response.json();",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response href attribute is of type string', function () {",
											"    pm.expect(instance.href).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"    pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.href);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTS02\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"    });",
											"    pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function () {",
											"      pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETS02\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"    });",
											"    pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"    pm.test('pm.globals.get(IDTS01) not expected on this test', function () {",
											"      pm.expect.fail()",
											"    });",
											"  }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification?name=tspec2",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification"
									],
									"query": [
										{
											"key": "name",
											"value": "tspec2"
										}
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTestSpecification?relatedServiceSpecification.id=rs2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response href attribute is of type string', function () {",
											"      pm.expect(instance.href).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"      pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.href);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTS02\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"      });",
											"      pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function () {",
											"        pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETS02\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"      });",
											"      pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"      pm.test('pm.globals.get(IDTS01) not expected on this test', function () {",
											"        pm.expect.fail()",
											"      });",
											"    }",
											"",
											"  });",
											"} else {",
											"  var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"  var instance = pm.response.json();",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response href attribute is of type string', function () {",
											"    pm.expect(instance.href).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"    pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.href);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTS02\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"    });",
											"    pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function () {",
											"      pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETS02\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"    });",
											"    pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"    pm.test('pm.globals.get(IDTS01) not expected on this test', function () {",
											"      pm.expect.fail()",
											"    });",
											"  }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification?relatedServiceSpecification.id=rs2",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification"
									],
									"query": [
										{
											"key": "relatedServiceSpecification.id",
											"value": "rs2"
										}
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "N4",
					"item": [
						{
							"name": "/serviceTestSpecification/{{IDTS01}}?fields=name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['name'];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"      pm.test('IDTS02 not expected on this test', function () {",
											"        pm.expect.fail()",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"",
											"      pm.test('Response name attribute is of type string', function () {",
											"        pm.expect(instance.name).to.be.a('string');",
											"      });",
											"",
											"      pm.test(\"Body includes value held on name\", function () {",
											"        pm.expect(pm.response.text()).to.include(instance.name);",
											"      });",
											"    }",
											"",
											"  });",
											"} else {",
											"  var instance = pm.response.json();",
											"",
											"  var requiredAttributes = ['name'];",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"    pm.test('IDTS02 not expected on this test', function () {",
											"      pm.expect.fail()",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"  }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification/{{IDTS01}}?fields=name",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification",
										"{{IDTS01}}"
									],
									"query": [
										{
											"key": "fields",
											"value": "name"
										}
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTestSpecification/{{IDTS02}}?fields=relatedServiceSpecification,name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['relatedServiceSpecification', 'name'];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDSQ01\")) {",
											"      pm.test('IDSQ01 not expected on this test', function () {",
											"        pm.expect.fail()",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDSQ02\")) {",
											"      pm.test('Response name attribute is of type string', function () {",
											"        pm.expect(instance.name).to.be.a('string');",
											"      });",
											"      pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"        pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"      });",
											"      pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"        pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"      });",
											"      pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"        pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"      });",
											"    }",
											"  });",
											"} else {",
											"  var instance = pm.response.json();",
											"",
											"  var requiredAttributes = ['relatedServiceSpecification', 'name'];",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"    pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification/{{IDTS02}}?fields=relatedServiceSpecification,name",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification",
										"{{IDTS02}}"
									],
									"query": [
										{
											"key": "fields",
											"value": "relatedServiceSpecification,name"
										}
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "N5",
					"item": [
						{
							"name": "/serviceTestSpecification?name=tspec2&relatedServiceSpecification.id=rs2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response href attribute is of type string', function () {",
											"      pm.expect(instance.href).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"      pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.href);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"    });",
											"    pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTS02\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"      });",
											"      pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function () {",
											"        pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETS02\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"      });",
											"      pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"      });",
											"      pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\"), function () {",
											"        pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"      pm.test('pm.globals.get(IDTS01) not expected on this test', function () {",
											"        pm.expect.fail()",
											"      });",
											"    }",
											"",
											"  });",
											"} else {",
											"  var requiredAttributes = ['id', 'href', 'name', 'relatedServiceSpecification', ];",
											"  var instance = pm.response.json();",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response href attribute is of type string', function () {",
											"    pm.expect(instance.href).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification attribute is of type object', function () {",
											"    pm.expect(instance.relatedServiceSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.id).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedServiceSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedServiceSpecification.href).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.href);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.id);",
											"  });",
											"  pm.test(\"Body includes value held on relatedServiceSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedServiceSpecification.href);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTS02\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTS02\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTS02\");",
											"    });",
											"    pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function () {",
											"      pm.expect(instance.href) == pm.globals.get(\"HREFTS02\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETS02\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETS02\");",
											"    });",
											"    pm.test('relatedServiceSpecification is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification) == pm.globals.get(\"RELATEDSERVICESPECIFICATIONTS02\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_IDTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.id) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_IDTS02\");",
											"    });",
											"    pm.test('RELATEDSERVICESPECIFICATION_HREFTS is ' + pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\"), function () {",
											"      pm.expect(instance.relatedServiceSpecification.href) == pm.globals.get(\"RELATEDSERVICESPECIFICATION_HREFTS02\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDTS01\")) {",
											"",
											"    pm.test('pm.globals.get(IDTS01) not expected on this test', function () {",
											"      pm.expect.fail()",
											"    });",
											"  }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification?name=tspec2&relatedServiceSpecification.id=rs2",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification"
									],
									"query": [
										{
											"key": "name",
											"value": "tspec2"
										},
										{
											"key": "relatedServiceSpecification.id",
											"value": "rs2"
										}
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "E1",
					"item": [
						{
							"name": "/serviceTestSpecification/{{IDTS03}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification/{{IDTS03}}",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification",
										"{{IDTS03}}"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "E2",
					"item": [
						{
							"name": "/serviceTestSpecification (Error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"relatedServiceSpecification\":{\n      \"id\":\"\",\n      \"href\":\"\"\n    }\n    \n} "
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "E3",
					"item": [
						{
							"name": "/serviceTestSpecification (Error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"tspec1\",\n    \"relatedServiceSpecification\":{\n    \n      \"href\":\"\"\n    }\n    \n}"
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTestSpecification",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTestSpecification"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "ServiceTest",
			"item": [
				{
					"name": "N1",
					"item": [
						{
							"name": "/serviceTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afe203ac-d007-4a89-bd3e-73c2667db5fb",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData)) {",
											"",
											"    pm.test('Array not expected as response', function () {",
											"        pm.expect.fail()",
											"    });",
											"",
											"",
											"}",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var instance = pm.response.json();",
											"var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"});",
											"",
											"",
											"",
											"pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"});",
											"pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"});",
											"pm.test('Response relatedService attribute is of type object', function () {",
											"    pm.expect(instance.relatedService).to.be.a('object');",
											"});",
											"pm.test('Response relatedService.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.href).to.be.a('string');",
											"});",
											"pm.test('Response relatedService.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.id).to.be.a('string');",
											"});",
											"pm.test('Response testSpecification attribute is of type object', function () {",
											"    pm.expect(instance.testSpecification).to.be.a('object');",
											"});",
											"pm.test('Response testSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.href).to.be.a('string');",
											"});",
											"pm.test('Response testSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.id).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test('id is set', function () {",
											"    pm.globals.set('IDTE01', instance.id);",
											"    pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"});",
											"pm.test('name is set', function () {",
											"    pm.globals.set('NAMETE01', instance.name);",
											"    pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"});",
											"pm.test('relatedService is set', function () {",
											"    pm.globals.set('RELATEDSERVICETE01', instance.relatedService);",
											"    pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"});",
											"pm.test('relatedService_href is set', function () {",
											"    pm.globals.set('RELATEDSERVICE_HREFTE01', instance.relatedService.href);",
											"    pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"});",
											"pm.test('relatedService_id is set', function () {",
											"    pm.globals.set('RELATEDSERVICE_IDTE01', instance.relatedService.id);",
											"    pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"});",
											"pm.test('testSpecification is set', function () {",
											"    pm.globals.set('TESTSPECIFICATIONTE01', instance.testSpecification);",
											"    pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"});",
											"pm.test('testSpecification_href is set', function () {",
											"    pm.globals.set('TESTSPECIFICATION_HREFTE01', instance.testSpecification.href);",
											"    pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"});",
											"pm.test('testSpecification_id is set', function () {",
											"    pm.globals.set('TESTSPECIFICATION_IDTE01', instance.testSpecification.id);",
											"    pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"});",
											"",
											"",
											"pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"});",
											"pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"});",
											"pm.test(\"Body includes value held on relatedService.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"});",
											"pm.test(\"Body includes value held on relatedService.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"});",
											"pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"});",
											"pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \n    \"name\": \"test1\",\n    \"relatedService\":{\n      \"id\":\"service1\",\n      \"href\":\"/service1\"\n    },\n    \"testSpecification\":{\n      \"id\":\"spec1\",\n        \"href\":\"/spec1\"\n    }\n}"
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService attribute is of type object', function () {",
											"      pm.expect(instance.relatedService).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedService.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.href).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.id).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification attribute is of type object', function () {",
											"      pm.expect(instance.testSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response testSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.href).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.id).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"      });",
											"      pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"        pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"        pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"        pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"      });",
											"      pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"        pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"        pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"        pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"      });",
											"",
											"    }",
											"",
											"",
											"  });",
											"} else {",
											"  var instance = pm.response.json();",
											"  var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService attribute is of type object', function () {",
											"    pm.expect(instance.relatedService).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedService.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.href).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.id).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification attribute is of type object', function () {",
											"    pm.expect(instance.testSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response testSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.href).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.id).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"    });",
											"    pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"      pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"      pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"      pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"    });",
											"    pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"      pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"      pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"      pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"    });",
											"",
											"  }",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTest{{IDTE01}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService attribute is of type object', function () {",
											"      pm.expect(instance.relatedService).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedService.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.href).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.id).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification attribute is of type object', function () {",
											"      pm.expect(instance.testSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response testSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.href).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.id).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"      });",
											"      pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"        pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"        pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"        pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"      });",
											"      pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"        pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"        pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"        pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"      });",
											"",
											"    }",
											"",
											"",
											"  });",
											"} else {",
											"  var instance = pm.response.json();",
											"  var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService attribute is of type object', function () {",
											"    pm.expect(instance.relatedService).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedService.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.href).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.id).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification attribute is of type object', function () {",
											"    pm.expect(instance.testSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response testSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.href).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.id).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"    });",
											"    pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"      pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"      pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"      pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"    });",
											"    pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"      pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"      pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"      pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"    });",
											"",
											"  }",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest/{{IDTE01}}",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest",
										"{{IDTE01}}"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "N2",
					"item": [
						{
							"name": "/serviceTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afe203ac-d007-4a89-bd3e-73c2667db5fb",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData)) {",
											"",
											"    pm.test('Array not expected as response', function () {",
											"        pm.expect.fail()",
											"    });",
											"",
											"",
											"}",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var instance = pm.response.json();",
											"var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"});",
											"",
											"",
											"",
											"pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"});",
											"pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"});",
											"pm.test('Response relatedService attribute is of type object', function () {",
											"    pm.expect(instance.relatedService).to.be.a('object');",
											"});",
											"pm.test('Response relatedService.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.href).to.be.a('string');",
											"});",
											"pm.test('Response relatedService.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.id).to.be.a('string');",
											"});",
											"pm.test('Response testSpecification attribute is of type object', function () {",
											"    pm.expect(instance.testSpecification).to.be.a('object');",
											"});",
											"pm.test('Response testSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.href).to.be.a('string');",
											"});",
											"pm.test('Response testSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.id).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test('id is set', function () {",
											"    pm.globals.set('IDTE02', instance.id);",
											"    pm.expect(instance.id) == pm.globals.get(\"IDTE02\");",
											"});",
											"pm.test('name is set', function () {",
											"    pm.globals.set('NAMETE02', instance.name);",
											"    pm.expect(instance.name) == pm.globals.get(\"NAMETE02\");",
											"});",
											"pm.test('relatedService is set', function () {",
											"    pm.globals.set('RELATEDSERVICETE02', instance.relatedService);",
											"    pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE02\");",
											"});",
											"pm.test('relatedService_href is set', function () {",
											"    pm.globals.set('RELATEDSERVICE_HREFTE02', instance.relatedService.href);",
											"    pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE02\");",
											"});",
											"pm.test('relatedService_id is set', function () {",
											"    pm.globals.set('RELATEDSERVICE_IDTE02', instance.relatedService.id);",
											"    pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE02\");",
											"});",
											"pm.test('testSpecification is set', function () {",
											"    pm.globals.set('TESTSPECIFICATIONTE02', instance.testSpecification);",
											"    pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE02\");",
											"});",
											"pm.test('testSpecification_href is set', function () {",
											"    pm.globals.set('TESTSPECIFICATION_HREFTE02', instance.testSpecification.href);",
											"    pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE02\");",
											"});",
											"pm.test('testSpecification_id is set', function () {",
											"    pm.globals.set('TESTSPECIFICATION_IDTE02', instance.testSpecification.id);",
											"    pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE02\");",
											"});",
											"",
											"",
											"pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"});",
											"pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"});",
											"pm.test(\"Body includes value held on relatedService.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"});",
											"pm.test(\"Body includes value held on relatedService.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"});",
											"pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"});",
											"pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test2\",\n    \"relatedService\":{\n      \"id\":\"service2\",\n      \"href\":\"/service2\"\n    },\n    \"testSpecification\":{\n      \"id\":\"spec2\",\n       \"href\":\"/spec2\"\n    }\n}"
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService attribute is of type object', function () {",
											"      pm.expect(instance.relatedService).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedService.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.href).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.id).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification attribute is of type object', function () {",
											"      pm.expect(instance.testSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response testSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.href).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.id).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"      });",
											"      pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"        pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"        pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"        pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"      });",
											"      pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"        pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"        pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"        pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDTE02\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTE02\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTE02\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE02\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE02\");",
											"      });",
											"      pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE02\"), function () {",
											"        pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE02\");",
											"      });",
											"      pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE02\"), function () {",
											"        pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE02\");",
											"      });",
											"      pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE02\"), function () {",
											"        pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE02\");",
											"      });",
											"      pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE02\"), function () {",
											"        pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE02\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE02\"), function () {",
											"        pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE02\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE02\"), function () {",
											"        pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE02\");",
											"      });",
											"",
											"    }",
											"",
											"",
											"  });",
											"} else {",
											"  var instance = pm.response.json();",
											"  var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService attribute is of type object', function () {",
											"    pm.expect(instance.relatedService).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedService.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.href).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.id).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification attribute is of type object', function () {",
											"    pm.expect(instance.testSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response testSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.href).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.id).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"    });",
											"    pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"      pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"      pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"      pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"    });",
											"    pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"      pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"      pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"      pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDTE02\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTE02\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTE02\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE02\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE02\");",
											"    });",
											"    pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE02\"), function () {",
											"      pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE02\");",
											"    });",
											"    pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE02\"), function () {",
											"      pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE02\");",
											"    });",
											"    pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE02\"), function () {",
											"      pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE02\");",
											"    });",
											"    pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE02\"), function () {",
											"      pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE02\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE02\"), function () {",
											"      pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE02\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE02\"), function () {",
											"      pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE02\");",
											"    });",
											"",
											"  }",
											"",
											"}",
											"",
											"pm.test(\"Body has IDTE01\", function () {",
											"  pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDTE01\"));",
											"});",
											"",
											"pm.test(\"Body has IDTE02\", function () {",
											"  pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDTE02\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTest{{IDTE02}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService attribute is of type object', function () {",
											"      pm.expect(instance.relatedService).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedService.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.href).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.id).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification attribute is of type object', function () {",
											"      pm.expect(instance.testSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response testSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.href).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.id).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTE02\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTE02\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTE02\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE02\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE02\");",
											"      });",
											"      pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE02\"), function () {",
											"        pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE02\");",
											"      });",
											"      pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE02\"), function () {",
											"        pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE02\");",
											"      });",
											"      pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE02\"), function () {",
											"        pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE02\");",
											"      });",
											"      pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE02\"), function () {",
											"        pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE02\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE02\"), function () {",
											"        pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE02\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE02\"), function () {",
											"        pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE02\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"      pm.test('pm.globals.get(IDTE01) not expected on this test', function () {",
											"        pm.expect.fail()",
											"      });",
											"    }",
											"",
											"  });",
											"} else {",
											"  var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"  var instance = pm.response.json();",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService attribute is of type object', function () {",
											"    pm.expect(instance.relatedService).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedService.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.href).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.id).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification attribute is of type object', function () {",
											"    pm.expect(instance.testSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response testSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.href).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.id).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTE02\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTE02\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTE02\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE02\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE02\");",
											"    });",
											"    pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE02\"), function () {",
											"      pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE02\");",
											"    });",
											"    pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE02\"), function () {",
											"      pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE02\");",
											"    });",
											"    pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE02\"), function () {",
											"      pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE02\");",
											"    });",
											"    pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE02\"), function () {",
											"      pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE02\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE02\"), function () {",
											"      pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE02\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE02\"), function () {",
											"      pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE02\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"    pm.test('pm.globals.get(IDTE01) not expected on this test', function () {",
											"      pm.expect.fail()",
											"    });",
											"  }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest/{{IDTE02}}",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest",
										"{{IDTE02}}"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "N3",
					"item": [
						{
							"name": "/serviceTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService attribute is of type object', function () {",
											"      pm.expect(instance.relatedService).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedService.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.href).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.id).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification attribute is of type object', function () {",
											"      pm.expect(instance.testSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response testSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.href).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.id).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"      });",
											"      pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"        pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"        pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"        pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"      });",
											"      pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"        pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"        pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"        pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDTE02\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTE02\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTE02\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE02\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE02\");",
											"      });",
											"      pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE02\"), function () {",
											"        pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE02\");",
											"      });",
											"      pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE02\"), function () {",
											"        pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE02\");",
											"      });",
											"      pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE02\"), function () {",
											"        pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE02\");",
											"      });",
											"      pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE02\"), function () {",
											"        pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE02\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE02\"), function () {",
											"        pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE02\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE02\"), function () {",
											"        pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE02\");",
											"      });",
											"",
											"    }",
											"",
											"",
											"  });",
											"} else {",
											"  var instance = pm.response.json();",
											"  var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService attribute is of type object', function () {",
											"    pm.expect(instance.relatedService).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedService.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.href).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.id).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification attribute is of type object', function () {",
											"    pm.expect(instance.testSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response testSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.href).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.id).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"    });",
											"    pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"      pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"      pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"      pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"    });",
											"    pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"      pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"      pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"      pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDTE02\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTE02\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTE02\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE02\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE02\");",
											"    });",
											"    pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE02\"), function () {",
											"      pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE02\");",
											"    });",
											"    pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE02\"), function () {",
											"      pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE02\");",
											"    });",
											"    pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE02\"), function () {",
											"      pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE02\");",
											"    });",
											"    pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE02\"), function () {",
											"      pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE02\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE02\"), function () {",
											"      pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE02\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE02\"), function () {",
											"      pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE02\");",
											"    });",
											"",
											"  }",
											"",
											"}",
											"",
											"pm.test(\"Body has IDTE01\", function () {",
											"  pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDTE01\"));",
											"});",
											"",
											"pm.test(\"Body has IDTE02\", function () {",
											"  pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDTE02\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTest?name=test1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService attribute is of type object', function () {",
											"      pm.expect(instance.relatedService).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedService.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.href).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.id).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification attribute is of type object', function () {",
											"      pm.expect(instance.testSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response testSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.href).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.id).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDSQ01\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"      });",
											"      pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"        pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"        pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"        pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"      });",
											"      pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"        pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"        pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"        pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDSQ02\")) {",
											"",
											"      pm.test('IDSQ02 not expected on this test', function () {",
											"        pm.expect.fail()",
											"      });",
											"    }",
											"",
											"  });",
											"} else {",
											"  var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"  var instance = pm.response.json();",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService attribute is of type object', function () {",
											"    pm.expect(instance.relatedService).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedService.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.href).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.id).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification attribute is of type object', function () {",
											"    pm.expect(instance.testSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response testSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.href).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.id).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDSQ01\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"    });",
											"    pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"      pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"      pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"      pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"    });",
											"    pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"      pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"      pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"      pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDSQ02\")) {",
											"",
											"    pm.test('IDSQ02 not expected on this test', function () {",
											"      pm.expect.fail()",
											"    });",
											"  }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest?name=test1",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest"
									],
									"query": [
										{
											"key": "name",
											"value": "test1"
										}
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTest? relatedService.id=service1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService attribute is of type object', function () {",
											"      pm.expect(instance.relatedService).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedService.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.href).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.id).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification attribute is of type object', function () {",
											"      pm.expect(instance.testSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response testSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.href).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.id).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDSQ01\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"      });",
											"      pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"        pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"        pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"        pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"      });",
											"      pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"        pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"        pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"        pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDSQ02\")) {",
											"",
											"      pm.test('IDSQ02 not expected on this test', function () {",
											"        pm.expect.fail()",
											"      });",
											"    }",
											"",
											"  });",
											"} else {",
											"  var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"  var instance = pm.response.json();",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService attribute is of type object', function () {",
											"    pm.expect(instance.relatedService).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedService.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.href).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.id).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification attribute is of type object', function () {",
											"    pm.expect(instance.testSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response testSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.href).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.id).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDSQ01\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"    });",
											"    pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"      pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"      pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"      pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"    });",
											"    pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"      pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"      pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"      pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDSQ02\")) {",
											"",
											"    pm.test('IDSQ02 not expected on this test', function () {",
											"      pm.expect.fail()",
											"    });",
											"  }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest?relatedService.id=service1",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest"
									],
									"query": [
										{
											"key": "relatedService.id",
											"value": "service1"
										}
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "N4",
					"item": [
						{
							"name": "/serviceTest/{{IDTE01}}?fields=name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['name' ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"      });",
											"  ",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDTE02\")) {",
											"",
											"",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE02\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE02\");",
											"      });",
											"",
											"    }",
											"",
											"",
											"  });",
											"} else {",
											"  var instance = pm.response.json();",
											"  var requiredAttributes = ['name'];",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  ",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"    });",
											"",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDTE02\")) {",
											"",
											" ",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE02\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE02\");",
											"    });",
											"",
											"",
											"  }",
											"",
											"}",
											"",
											"pm.test(\"Body has IDTE01\", function () {",
											"  pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDTE01\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest/{{IDTE01}}?fields=name",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest",
										"{{IDTE01}}"
									],
									"query": [
										{
											"key": "fields",
											"value": "name"
										}
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTest?name=test1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['name'];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											" ",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											" ",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"      });",
											"    }",
											"",
											"",
											"  });",
											"} else {",
											"  var instance = pm.response.json();",
											"  var requiredAttributes = ['name'];",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  ",
											"  ",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"    });",
											" ",
											"",
											"  }",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest?name=test1",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest"
									],
									"query": [
										{
											"key": "name",
											"value": "test1"
										}
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						},
						{
							"name": "/serviceTest/{{IDTE02}}?fields=relatedService,testSpecification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['relatedService', 'testSpecification'];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"    pm.test('Response relatedService attribute is of type object', function () {",
											"      pm.expect(instance.relatedService).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedService.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.href).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.id).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification attribute is of type object', function () {",
											"      pm.expect(instance.testSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response testSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.href).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.id).to.be.a('string');",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTE02\")) {",
											"",
											" ",
											"      pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"        pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"        pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"        pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"      });",
											"      pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"        pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"        pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"        pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"      });",
											"",
											"    }",
											"    if (instance.id == pm.globals.get(\"IDTE02\")) {",
											"",
											"      pm.test('IDSQ02 not expected on this test', function () {",
											"        pm.expect.fail()",
											"      });",
											"    }",
											"",
											"  });",
											"} else {",
											"    var requiredAttributes = ['relatedService', 'testSpecification'];",
											"  var instance = pm.response.json();",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response relatedService attribute is of type object', function () {",
											"    pm.expect(instance.relatedService).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedService.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.href).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.id).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification attribute is of type object', function () {",
											"    pm.expect(instance.testSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response testSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.href).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.id).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on relatedService.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTE02\")) {",
											"",
											"",
											"    pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE02\"), function () {",
											"      pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE02\");",
											"    });",
											"    pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE02\"), function () {",
											"      pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE02\");",
											"    });",
											"    pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE02\"), function () {",
											"      pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE02\");",
											"    });",
											"    pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE02\"), function () {",
											"      pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE02\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE02\"), function () {",
											"      pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE02\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE02\"), function () {",
											"      pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE02\");",
											"    });",
											"",
											"  }",
											"  if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"    pm.test('IDTE01 not expected on this test', function () {",
											"      pm.expect.fail()",
											"    });",
											"  }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest/{{IDTE02}}?fields=relatedService,testSpecification",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest",
										"{{IDTE02}}"
									],
									"query": [
										{
											"key": "fields",
											"value": "relatedService,testSpecification"
										}
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "N5",
					"item": [
						{
							"name": "/serviceTest?name=test1&relatedService.id=service1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
											"  jsonData.forEach(function (instance, index) {",
											"",
											"    var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"    pm.test('Instance has all mandatory attributes', function () {",
											"      pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"    });",
											"",
											"",
											"",
											"    pm.test('Response id attribute is of type string', function () {",
											"      pm.expect(instance.id).to.be.a('string');",
											"    });",
											"    pm.test('Response name attribute is of type string', function () {",
											"      pm.expect(instance.name).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService attribute is of type object', function () {",
											"      pm.expect(instance.relatedService).to.be.a('object');",
											"    });",
											"    pm.test('Response relatedService.href attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.href).to.be.a('string');",
											"    });",
											"    pm.test('Response relatedService.id attribute is of type string', function () {",
											"      pm.expect(instance.relatedService.id).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification attribute is of type object', function () {",
											"      pm.expect(instance.testSpecification).to.be.a('object');",
											"    });",
											"    pm.test('Response testSpecification.href attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.href).to.be.a('string');",
											"    });",
											"    pm.test('Response testSpecification.id attribute is of type string', function () {",
											"      pm.expect(instance.testSpecification.id).to.be.a('string');",
											"    });",
											"",
											"",
											"    pm.test(\"Body includes value held on id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.id);",
											"    });",
											"    pm.test(\"Body includes value held on name\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.name);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"    });",
											"    pm.test(\"Body includes value held on relatedService.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"    });",
											"    pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"      pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"    });",
											"",
											"",
											"",
											"",
											"    // Individualized tests",
											"    if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"      pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"        pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"      });",
											"      pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"        pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"      });",
											"      pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"        pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"        pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"      });",
											"      pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"        pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"      });",
											"      pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"        pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"        pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"      });",
											"      pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"        pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"      });",
											"",
											"    }",
											"",
											"",
											"  });",
											"} else {",
											"  var instance = pm.response.json();",
											"  var requiredAttributes = ['id', 'name', 'relatedService', 'testSpecification', ];",
											"",
											"  pm.test('Instance has all mandatory attributes', function () {",
											"    pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
											"  });",
											"",
											"",
											"",
											"  pm.test('Response id attribute is of type string', function () {",
											"    pm.expect(instance.id).to.be.a('string');",
											"  });",
											"  pm.test('Response name attribute is of type string', function () {",
											"    pm.expect(instance.name).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService attribute is of type object', function () {",
											"    pm.expect(instance.relatedService).to.be.a('object');",
											"  });",
											"  pm.test('Response relatedService.href attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.href).to.be.a('string');",
											"  });",
											"  pm.test('Response relatedService.id attribute is of type string', function () {",
											"    pm.expect(instance.relatedService.id).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification attribute is of type object', function () {",
											"    pm.expect(instance.testSpecification).to.be.a('object');",
											"  });",
											"  pm.test('Response testSpecification.href attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.href).to.be.a('string');",
											"  });",
											"  pm.test('Response testSpecification.id attribute is of type string', function () {",
											"    pm.expect(instance.testSpecification.id).to.be.a('string');",
											"  });",
											"",
											"",
											"  pm.test(\"Body includes value held on id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.id);",
											"  });",
											"  pm.test(\"Body includes value held on name\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.name);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.href);",
											"  });",
											"  pm.test(\"Body includes value held on relatedService.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.relatedService.id);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.href\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.href);",
											"  });",
											"  pm.test(\"Body includes value held on testSpecification.id\", function () {",
											"    pm.expect(pm.response.text()).to.include(instance.testSpecification.id);",
											"  });",
											"",
											"",
											"",
											"",
											"  // Individualized tests",
											"  if (instance.id == pm.globals.get(\"IDTE01\")) {",
											"",
											"    pm.test('id is ' + pm.globals.get(\"IDTE01\"), function () {",
											"      pm.expect(instance.id) == pm.globals.get(\"IDTE01\");",
											"    });",
											"    pm.test('name is ' + pm.globals.get(\"NAMETE01\"), function () {",
											"      pm.expect(instance.name) == pm.globals.get(\"NAMETE01\");",
											"    });",
											"    pm.test('relatedService is ' + pm.globals.get(\"RELATEDSERVICETE01\"), function () {",
											"      pm.expect(instance.relatedService) == pm.globals.get(\"RELATEDSERVICETE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_HREFTE is ' + pm.globals.get(\"RELATEDSERVICE_HREFTE01\"), function () {",
											"      pm.expect(instance.relatedService.href) == pm.globals.get(\"RELATEDSERVICE_HREFTE01\");",
											"    });",
											"    pm.test('RELATEDSERVICE_IDTE is ' + pm.globals.get(\"RELATEDSERVICE_IDTE01\"), function () {",
											"      pm.expect(instance.relatedService.id) == pm.globals.get(\"RELATEDSERVICE_IDTE01\");",
											"    });",
											"    pm.test('testSpecification is ' + pm.globals.get(\"TESTSPECIFICATIONTE01\"), function () {",
											"      pm.expect(instance.testSpecification) == pm.globals.get(\"TESTSPECIFICATIONTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_HREFTE is ' + pm.globals.get(\"TESTSPECIFICATION_HREFTE01\"), function () {",
											"      pm.expect(instance.testSpecification.href) == pm.globals.get(\"TESTSPECIFICATION_HREFTE01\");",
											"    });",
											"    pm.test('TESTSPECIFICATION_IDTE is ' + pm.globals.get(\"TESTSPECIFICATION_IDTE01\"), function () {",
											"      pm.expect(instance.testSpecification.id) == pm.globals.get(\"TESTSPECIFICATION_IDTE01\");",
											"    });",
											"",
											"  }",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest?name=test1&relatedService.id=service1",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest"
									],
									"query": [
										{
											"key": "name",
											"value": "test1"
										},
										{
											"key": "relatedService.id",
											"value": "service1"
										}
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "E1",
					"item": [
						{
							"name": "/serviceTest/{{IDTE03}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfd1a51-5a0a-42a4-8605-8c2175af8176",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest/{{IDTE03}}",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest",
										"{{IDTE03}}"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "E2",
					"item": [
						{
							"name": "/serviceTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afe203ac-d007-4a89-bd3e-73c2667db5fb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \n    \"name\": \"test\",\n    \"relatedService\":{\n      \"id\":\"spec\",\n      \"href\":\"/spec\"\n    }\n}"
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "E3",
					"item": [
						{
							"name": "/serviceTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afe203ac-d007-4a89-bd3e-73c2667db5fb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \n    \"name\": \"test\",\n    \"relatedService\":{\n    \n      \"href\":\"/spec\"\n    },\n    \"testSpecification\":{\n      \"id\":\"spec\",\n        \"href\":\"/spec\"\n    }\n}"
								},
								"url": {
									"raw": "{{ServiceTestAPI}}/serviceTest",
									"host": [
										"{{ServiceTestAPI}}"
									],
									"path": [
										"serviceTest"
									]
								},
								"description": "This operation creates a ServiceTest entity."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}